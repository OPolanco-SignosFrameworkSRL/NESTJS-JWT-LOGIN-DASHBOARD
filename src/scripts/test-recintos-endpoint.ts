import axios from 'axios';

async function testRecintosEndpoint() {
  console.log('üöÄ Probando el endpoint de recintos con estado como n√∫mero...\n');
  
  const baseUrl = 'http://localhost:3000/api';
  
  // Primero hacer login para obtener el token
  console.log('üîê Haciendo login...');
  try {
    const loginResponse = await axios.post(`${baseUrl}/auth/login`, {
      cedula: '40208712480',
      password: '123456'
    });
    
    const token = loginResponse.data.access_token;
    console.log('‚úÖ Login exitoso, token obtenido');
    
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    console.log('\n' + '='.repeat(60) + '\n');
    
    // Probar endpoint GET /api/recintos (obtener todos)
    console.log('üìã Prueba 1: Obteniendo todos los recintos');
    try {
      const allRecintosResponse = await axios.get(`${baseUrl}/recintos`, { headers });
      console.log('‚úÖ Respuesta exitosa:');
      console.log(`   ‚Ä¢ Total de recintos: ${allRecintosResponse.data.length || allRecintosResponse.data.data?.length || 0}`);
      
      const recintos = Array.isArray(allRecintosResponse.data) 
        ? allRecintosResponse.data 
        : allRecintosResponse.data.data || [];
        
      if (recintos.length > 0) {
        console.log('   ‚Ä¢ Primer recinto:');
        const firstRecinto = recintos[0];
        console.log(`     - ID: ${firstRecinto.id}`);
        console.log(`     - Nombre: ${firstRecinto.recinto}`);
        console.log(`     - Estado: ${firstRecinto.estado} (${typeof firstRecinto.estado})`);
        console.log(`     - Ubicaci√≥n: ${firstRecinto.ubicacion}`);
        
        // Usar el ID del primer recinto para la siguiente prueba
        const testId = firstRecinto.id;
        
        console.log('\n' + '='.repeat(60) + '\n');
        
        // Probar endpoint GET /api/recintos/{id} (obtener por ID)
        console.log(`üìã Prueba 2: Obteniendo recinto por ID (${testId})`);
        try {
          const recintoByIdResponse = await axios.get(`${baseUrl}/recintos/${testId}`, { headers });
          console.log('‚úÖ Respuesta exitosa:');
          const recinto = recintoByIdResponse.data;
          console.log(`   ‚Ä¢ ID: ${recinto.id}`);
          console.log(`   ‚Ä¢ Nombre: ${recinto.recinto}`);
          console.log(`   ‚Ä¢ Estado: ${recinto.estado} (tipo: ${typeof recinto.estado})`);
          console.log(`   ‚Ä¢ Ubicaci√≥n: ${recinto.ubicacion}`);
          
          // Verificar que el estado sea un n√∫mero
          if (typeof recinto.estado === 'number') {
            console.log('   ‚úÖ CORRECTO: El estado es un n√∫mero como se esperaba');
            console.log(`   ‚Ä¢ Valor num√©rico: ${recinto.estado === 1 ? '1 (Activo)' : '0 (Inactivo)'}`);
          } else {
            console.log(`   ‚ùå ERROR: Se esperaba un n√∫mero pero se recibi√≥ ${typeof recinto.estado}: ${recinto.estado}`);
          }
          
        } catch (error) {
          if (error.response) {
            console.log('‚ùå Error en obtener por ID:', error.response.data.message);
          } else {
            console.log('‚ùå Error de conexi√≥n en obtener por ID:', error.message);
          }
        }
        
      } else {
        console.log('   ‚ö†Ô∏è No se encontraron recintos para probar');
      }
      
    } catch (error) {
      if (error.response) {
        console.log('‚ùå Error en obtener todos:', error.response.data.message);
      } else {
        console.log('‚ùå Error de conexi√≥n en obtener todos:', error.message);
      }
    }
    
    console.log('\nüèÅ Pruebas completadas');
    console.log('\nüìã RESUMEN:');
    console.log('‚Ä¢ Endpoint: GET /api/recintos/{id}');
    console.log('‚Ä¢ Campo estado: Ahora devuelve n√∫meros (0=Inactivo, 1=Activo)');
    console.log('‚Ä¢ Antes: boolean (true/false)');
    console.log('‚Ä¢ Ahora: number (0/1)');
    
  } catch (loginError) {
    console.log('‚ùå Error en login:', loginError.response?.data?.message || loginError.message);
  }
}

testRecintosEndpoint().catch(console.error);
